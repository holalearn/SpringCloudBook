# 步骤三：配置Zuul应用的基本信息，应用名、端口号
spring.application.name=api-gateway
server.port=5555

# eureka
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/

# 路由映射关系
# 映射关系名称：zuul.routes.<路由名称>
# 路由规则：每一条规则包含
# 一、zuul.routes.<路由名称>.path定义的匹配客户端请求的路径表达式
# 二、zuul.routes.<路由名称>.url或者zuul.routes.<路由名称>.serviceId指定的具体实例地址或者服务名

# 步骤四：配置路由规则
# 单实例配置
# url路由
# 所有符合/api-a-url/**规则的访问都会被路由转发到http://localhost:8001/
# 比如当访问http://localhost:5555/api-a-url/hello的时候，会转发到http://localhost:8001/hello
# 将/**部分转发到对应的url上
# zuul.routes.<路由名称>.path和zuul.routes.<路由名称>.url
# 路由名称可以自定义，但是path和url需要相同
zuul.routes.api-a-url.path=/api-a-url/**
zuul.routes.api-a-url.url=http://localhost:8001/

# 多实例配置
# 多个url路由
# 所有符合/ddd/**规则的访问都会被路由转发到http://localhost:8001/,http://localhost:8002/
#zuul.routes.api-d.path=/ddd/**
# 这里的serviceId是由用户手工命名的服务名称，配合ribbon.listOfServers参数实现服务实例的维护
#zuul.routes.api-d.serviceId=hello
# 存在多个实例时，API网关在路由转发时需要实现负载均衡策略，SpringCloud Zuul自带对于Ribbon的依赖
# 默认情况下，Ribbon会根据服务发现机制来回去服务名对应的实例清单，这里没有依赖eureka，而是手工设置，因此参数设置为false
#ribbon.eureka.enabled=false
# 与zuul.routes.<route>.serviceId的配置相对应，开头的hello对应了serviceId的值
# 手工维护了服务与实例的对应关系
#hello.ribbon.listOfServers=http://localhost:8001/,http://localhost:8002/

# 服务路由
# Zuul将自身也注册到Eureka服务注册中心，同时从注册中心获取所有服务以及它们的实例清单
# Zuul只需通过Ribbon的负载均衡策略，直接从清单中选择一个具体的实例进行转发就完成了路由工作
# zuul.routes.<路由名称>.path和zuul.routes.<路由名称>.serviceId
# 将/**部分转发到对应的service上
zuul.routes.api-a.path=/api/a/**
zuul.routes.api-a.serviceId=hello-service

zuul.routes.api-b.path=/api-b/**
zuul.routes.api-b.serviceId=hello-service
#zuul.routes.api-b.strip-prefix=true

zuul.routes.api-c.path=/ddd/**
zuul.routes.api-c.serviceId=hello-service

#zuul.routes.api-d.path=/ddd/hello
#zuul.routes.api-d.serviceId=hello-service2

# 路由到服务的简写形式
# zuul.routes.<serviceId>=<path>
# <serviceId>用来指定具体服务名，<path>用来配置匹配表达式
# 请求路由为/eee的路由到serviceId为'hello-service'的服务实例
#zuul.routes.hello-service=/eee/**

# routes to local forward
zuul.routes.api-b-url.path=/api-b-url/**
zuul.routes.api-b-url.url=forward:/local

# route connection
zuul.host.max-per-route-connections=20
zuul.host.max-total-connections=200

# grobal prefix
#zuul.prefix=/api

# grobal strip prefix, default is true(but it has some bugs, when routes path contains zuul.prefix's value)
#zuul.strip-prefix=false

# router strip prefix
#zuul.routes.api-b.strip-prefix=false

# 服务路由的默认规则
# 当Zuul注册Eureka之后，Zuul会为Eureka中的每一个服务自动创建一个默认路由规则
# 默认匹配：zuul.routes.<服务名>.path=/<服务名>/**
# 默认映射：zuul.routes.<服务名>.serviceId=<服务名>
# Set of service names not to consider for proxying automatically.
# By default all services in the discovery client will be proxied.
# For example, set zuul.ignored-services=*, then only routes configed by zuul.routes.* will be proxied.
# And default service proxy will disabled.
#zuul.ignored-services=*

# ignored path;
# o.s.c.n.z.f.pre.PreDecorationFilter      : No route found for uri: /xxx/yyy/zzz
#zuul.ignored-patterns=/**/hello/**

# timeout setting
#ribbon.ConnectTimeout=3000
#ribbon.ReadTimeout=1000

# fileupload setting
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
#ribbon.ConnectTimeout=3000
#ribbon.ReadTimeout=60000

# Disable Zuul Filters
# zuul.<SimpleClassName>.<filterType>.disable=true
zuul.AccessFilter.pre.disable=true

# ZuulServlet path
#zuul.servlet-path=/zuul
